{"config":{"lang":["zh","en","ja"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p> \u7ea6 54 \u4e2a\u5b57 </p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"nlp1/","title":"nlp\u5e38\u7528\u5de5\u5177\u5305","text":"<p> \u7ea6 3391 \u4e2a\u5b57  298 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 17 \u5206\u949f</p>"},{"location":"nlp1/#python","title":"python\u5b57\u7b26\u4e32\u5904\u7406","text":""},{"location":"nlp1/#_1","title":"\u53bb\u9664\u5b57\u7b26\u4e32\u4e24\u7aef\u7684\u7279\u6b8a\u5b57\u7b26","text":"<ol> <li><pre><code>input_str = ' \u4eca\u5929\u98ce\u548c\u65e5\u4e3d '\ninput_str.strip()\n</code></pre> output:'\u4eca\u5929\u98ce\u548c\u65e5\u4e3d'</li> </ol> <p><pre><code>input_str.rstrip()\n</code></pre> output:' \u4eca\u5929\u98ce\u548c\u65e5\u4e3d'</p> <p><pre><code>input_str.lstrip()\n</code></pre> output:'\u4eca\u5929\u98ce\u548c\u65e5\u4e3d '</p> <ol> <li><pre><code>input_str = 'AAA\u4eca\u5929\u98ce\u548c\u65e5\u4e3dAAA'\ninput_str.strip('A')\n</code></pre> output:'\u4eca\u5929\u98ce\u548c\u65e5\u4e3d' <pre><code>input_str.rstrip('A')\n</code></pre> output:'AAA\u4eca\u5929\u98ce\u548c\u65e5\u4e3d' <pre><code>input_str.lstrip('A')\n</code></pre> output:'\u4eca\u5929\u98ce\u548c\u65e5\u4e3dAAA'</li> </ol>"},{"location":"nlp1/#_2","title":"\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26","text":"<p><pre><code>input_str = ' \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u4eca\u5929 '\ninput_str.replace('\u4eca\u5929','\u6628\u5929')\n</code></pre> output:' \u6628\u5929\u98ce\u548c\u65e5\u4e3d\u6628\u5929 '</p> <p><pre><code>input_str = '\u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u4eca\u5929'\ninput_str.replace('\u4eca\u5929','')\n</code></pre> output:'\u98ce\u548c\u65e5\u4e3d'</p>"},{"location":"nlp1/#_3","title":"\u67e5\u627e\u64cd\u4f5c","text":"<p><pre><code>input_str = '\u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u4eca\u5929'\ninput_str.find('\u4eca\u5929')\n</code></pre> output:0</p>"},{"location":"nlp1/#_4","title":"\u5224\u65ad\u64cd\u4f5c","text":"<ol> <li>\u5224\u65ad\u662f\u5426\u4e3a\u5b57\u6bcd(\u5168\u90e8\u662f) <pre><code>   input_str = ' \u4eca\u5929\u98ce\u548c\u65e5\u4e3d '\n   input_str.isalpha()\n   ```\n   output:False\n\n2. \u6570\u5b57\uff1a\n```python\ninput_str.isdigit()\n</code></pre></li> </ol>"},{"location":"nlp1/#_5","title":"\u5206\u5272\u5408\u5e76\u64cd\u4f5c","text":"<ol> <li><pre><code>input_str = '\u4eca\u5929 \u98ce\u548c\u65e5\u4e3d \u7684,\u5929\u6c14 \u4e0d\u9519'\ninput_str = input_str.split(' ')\nprint(input_str)\n</code></pre> output:['\u4eca\u5929', '\u98ce\u548c\u65e5\u4e3d', '\u7684,\u5929\u6c14', '\u4e0d\u9519'] <pre><code>   ' '.join(input_str)\n</code></pre> output1:'\u4eca\u5929 \u98ce\u548c\u65e5\u4e3d \u7684,\u5929\u6c14 \u4e0d\u9519' <pre><code>   ''.join(input_str)\n</code></pre> output2:'\u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u7684,\u5929\u6c14\u4e0d\u9519'</li> </ol>"},{"location":"nlp1/#_6","title":"\u5e2e\u52a9\u6587\u6863","text":"<pre><code>help(str)\n</code></pre>"},{"location":"nlp1/#_7","title":"\u6b63\u5219\u8868\u793a\u57fa\u672c\u8bed\u6cd5","text":"<p>\u56fe\u72471</p> <ul> <li>\u6307\u5b9a\u597d\u5339\u914d\u7684\u6a21\u5f0f-pattern</li> <li>\u9009\u62e9\u76f8\u5e94\u7684\u65b9\u6cd5-match,search\u7b49</li> <li> <p>\u5f97\u5230\u5339\u914d\u7ed3\u679c-group</p> </li> <li> <p>re.match #\u4ece\u5f00\u59cb\u4f4d\u7f6e\u5f00\u59cb\u5339\u914d\uff0c\u5982\u679c\u5f00\u5934\u6ca1\u6709\u5219\u65e0</p> </li> <li>re.search #\u641c\u7d22\u6574\u4e2a\u5b57\u7b26\u4e32</li> <li>re.findall #\u641c\u7d22\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u4e2alist</li> </ul>"},{"location":"nlp1/#_8","title":"\u5b57\u7b26\u96c6\u5408","text":"<ul> <li>[]\u6307\u5b9a\u5305\u542b\u5b57\u7b26</li> <li>[a-zA-Z]\u6307\u5b9a\u6240\u6709\u82f1\u6587\u5b57\u6bcd\u7684\u5927\u5c0f\u5199</li> <li>[^a-zA-Z]\u6307\u5b9a\u4e0d\u5339\u914d\u6240\u6709\u82f1\u6587\u5b57\u6bcd \u4f8b\u5b50\uff1a 1. <pre><code>input = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981\u3002 123abc'\nimport re\npattern = re.compile(r'.')\nre.findall(pattern,input)\n</code></pre> output: ['\u81ea',  '\u7136',  '\u8bed',  '\u8a00',  '\u5904',  '\u7406',  '\u5f88',  '\u91cd',  '\u8981',  '\u3002',  ' ',  '1',  '2',  '3',  'a',  'b',  'c']</li> </ul> <p>2. <pre><code>input = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981\u3002 123abc'\nimport re\npattern = re.compile(r'[abc]')\nre.findall(pattern,input)\n</code></pre> output: ['a', 'b', 'c']</p> <p>3. <pre><code>input = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981\u3002 123abc'\nimport re\npattern = re.compile(r'[a-zA-Z]')\nre.findall(pattern,input)\n</code></pre> output: ['a', 'b', 'c']</p> <p>4. <pre><code>input = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981\u3002 123abc'\nimport re\npattern = re.compile(r'[^a-zA-Z]')\nre.findall(pattern,input)\n</code></pre> output:['\u81ea', '\u7136', '\u8bed', '\u8a00', '\u5904', '\u7406', '\u5f88', '\u91cd', '\u8981', '\u3002', ' ', '1', '2', '3']</p>"},{"location":"nlp1/#_9","title":"\u6216\u65b9\u6cd5","text":"<p>1. <pre><code>input = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981\u3002 123abc'\nimport re\npattern = re.compile(r'[a-zA-Z]|[0-9]')\nre.findall(pattern,input)\n</code></pre> output:['1', '2', '3', 'a', 'b', 'c']</p>"},{"location":"nlp1/#_10","title":"\u7cbe\u786e\u5339\u914d\u548c\u6700\u5c0f\u5339\u914d","text":"<ol> <li> <p>\u7cbe\u786e\u5339\u914d '{m}'\u7cbe\u786e\u5339\u914dm\u6b21 <pre><code>input = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981\u3002 12abc789'\nimport re\npattern = re.compile(r'\\d{3}')\nre.findall(pattern,input)\n</code></pre> output: ['789']</p> </li> <li> <p>\u6700\u5c0f\u5339\u914d '{m,n}'\u6700\u5c11\u5339\u914dm\u6b21\uff0c\u6700\u591a\u5339\u914dn\u6b21 <pre><code>input = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981\u3002 12abc789'\nimport re\npattern = re.compile(r'\\d{1,3}')\nre.findall(pattern,input)\n</code></pre> output: ['12', '789']</p> </li> </ol>"},{"location":"nlp1/#matchsearch","title":"match\u4e0esearch","text":"<p><pre><code>input2 = '123\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981'\nimport re\npattern = re.compile(r'\\d')\nmatch = re.match(pattern,input2)\nmatch.group()\n</code></pre> output:'1'</p>"},{"location":"nlp1/#_11","title":"\u5b57\u7b26\u4e32\u7684\u66ff\u6362\u548c\u4fee\u6539","text":"<p>\u5728\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u89c4\u683c\u89c4\u5219\u67e5\u627e\u5339\u914d\u7684\u5b57\u7b26\u4e32\uff0c\u518d\u628a\u5b83\u4eec\u66ff\u6362\u6210\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u6700\u591a\u66ff\u6362\u6b21\u6570\uff0c\u5426\u5219\u5c06\u66ff\u6362\u6240\u6709\u7684\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\u3002 sub( rule ,replace ,target [.count]) subn(rule ,replace , target [.count] ) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u89c4\u5219\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6307\u5b9a\u7684\u7528\u6765\u66ff\u6362\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u76ee\u6807\u5b57\u7b26\u4e32\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u6700\u591a\u66ff\u6362\u6b21\u6570\u3002 sub \u8fd4\u56de\u4e00\u4e2a\u88ab\u66ff\u6362\u7684\u5b57\u7b26\u4e32 subn \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u88ab\u66ff\u6362\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u660e\u4ea7\u751f\u4e86\u591a\u5c11\u6b21\u66ff\u6362\u3002 1. <pre><code>input2 = '123\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981'\nimport re\npattern = re.compile(r'\\d')\nre.sub(pattern,\"\u6570\u5b57\",input2)\n</code></pre> output:'\u6570\u5b57\u6570\u5b57\u6570\u5b57\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981' 2. <pre><code>input2 = '123\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981'\nimport re\npattern = re.compile(r'\\d')\nre.subn(pattern,\"\u6570\u5b57\",input2) \n</code></pre> output:('\u6570\u5b57\u6570\u5b57\u6570\u5b57\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981', 3)</p>"},{"location":"nlp1/#split","title":"split \u5207\u7247\u51fd\u6570","text":"<p>\u4f7f\u7528\u6307\u5b9a\u7684\u6b63\u5219\u89c4\u5219\u5728\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5339\u914d\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u5b83\u4eec\u4f5c\u4e3a\u5206\u754c\uff0c\u628a\u5b57\u7b26\u4e32\u5207\u7247\u3002 split( rule , target [,maxsplit] ) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u89c4\u5219\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u76ee\u6807\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u6700\u591a\u5207\u7247\u6b21\u6570,\u8fd4\u56de\u4e00\u4e2a\u88ab\u5207\u5b8c\u7684\u5b50\u5b57\u7b26\u4e32\u7684\u5217\u8868 <pre><code>input3 = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981123\u673a\u5668\u5b66\u4e60456\u6df1\u5ea6\u5b66\u4e60'\nimport re\npattern = re.compile(r'\\d+')\nre.split(pattern,input3)\n</code></pre> output:['\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981', '\u673a\u5668\u5b66\u4e60', '\u6df1\u5ea6\u5b66\u4e60']</p>"},{"location":"nlp1/#p","title":"'(?P\u2026)'\u547d\u540d\u7ec4","text":"<p>&lt;\u2026&gt;'\u91cc\u9762\u662f\u4f60\u7ed9\u8fd9\u4e2a\u7ec4\u8d77\u7684\u540d\u5b57 1. <pre><code>input3 = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981123\u673a\u5668\u5b66\u4e60456\u6df1\u5ea6\u5b66\u4e60'\nimport re\npattern = re.compile(r'(?P&lt;dota&gt;\\d+)(?P&lt;lol&gt;\\D+)')\nm = re.search(pattern,input3)\nm.group('dota')\n</code></pre> output:'123'</p> <p>2. <pre><code>input3 = '\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5f88\u91cd\u8981123\u673a\u5668\u5b66\u4e60456\u6df1\u5ea6\u5b66\u4e60'\nimport re\npattern = re.compile(r'(?P&lt;dota&gt;\\d+)(?P&lt;lol&gt;\\D+)')\nm = re.search(pattern,input3)\nm.group('lol')\n</code></pre> output:'\u673a\u5668\u5b66\u4e60'</p>"},{"location":"nlp1/#nltk","title":"NLTK\u5de5\u5177\u5305","text":"<p>\u4e0b\u8f7d\u9700\u8981\u7ffb\u5899 <pre><code>import nltk\nnltk.download()\n</code></pre></p>"},{"location":"nlp1/#_12","title":"\u5206\u8bcd","text":"<p><pre><code>import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.text import Text\ninput_str = \"Today's weather is good, very windy and suny, we have no classes in the afternoon,we have to play baketball tomorrow.\" \ntokens = word_tokenize(input_str)\ntokens =[word.lower() for word in tokens]\nprint(tokens[:5])\n</code></pre> output:['today', \"'s\", 'weather', 'is', 'good']</p>"},{"location":"nlp1/#text","title":"Text\u5bf9\u8c61","text":"<p><pre><code>help(nltk.text)\n</code></pre> <pre><code>t = Text(tokens)\nt.count('good')\nt.index('good')\nt.plot(8)\n</code></pre> output: 1 4 \u56fe\u72472</p>"},{"location":"nlp1/#_13","title":"\u505c\u7528\u8bcd","text":"<p><pre><code>import nltk\nfrom nltk.corpus import stopwords\nprint(stopwords.raw('english').replace('\\n',' '))\n</code></pre> output:i me my myself we our ours ourselves you you're you've you'll you'd your yours yourself yourselves he him his himself she she's her hers herself it it's its itself they them their theirs themselves what which who whom this that that'll these those am is are was were be been being have has had having do does did doing a an the and but if or because as until while of at by for with about against between into through during before after above below to from up down in out on off over under again further then once here there when where why how all any both each few more most other some such no nor not only own same so than too very s t can will just don don't should should've now d ll m o re ve y ain aren aren't couldn couldn't didn didn't doesn doesn't hadn hadn't hasn hasn't haven haven't isn isn't ma mightn mightn't mustn mustn't needn needn't shan shan't shouldn shouldn't wasn wasn't weren weren't won won't wouldn wouldn't</p> <p><pre><code>import nltk\nfrom nltk.corpus import stopwords\nprint(stopwords.raw('chinese').replace('\\n',' '))\n</code></pre> output:\u4e00 \u4e00\u4e0b \u4e00\u4e9b \u4e00\u5207 \u4e00\u5219 \u4e00\u5929 \u4e00\u5b9a \u4e00\u65b9\u9762 \u4e00\u65e6 \u4e00\u65f6 \u4e00\u6765 \u4e00\u6837 \u4e00\u6b21 \u4e00\u7247 \u4e00\u76f4 \u4e00\u81f4 \u4e00\u822c \u4e00\u8d77 \u4e00\u8fb9 \u4e00\u9762 \u4e07\u4e00 \u4e0a\u4e0b \u4e0a\u5347 \u4e0a\u53bb \u4e0a\u6765 \u4e0a\u8ff0 \u4e0a\u9762 \u4e0b\u5217 \u4e0b\u53bb \u4e0b\u6765 \u4e0b\u9762 \u4e0d\u4e00 \u4e0d\u4e45 \u4e0d\u4ec5 \u4e0d\u4f1a \u4e0d\u4f46 \u4e0d\u5149 \u4e0d\u5355 \u4e0d\u53d8 \u4e0d \u53ea \u4e0d\u53ef \u4e0d\u540c \u4e0d\u591f \u4e0d\u5982 \u4e0d\u5f97 \u4e0d\u6015 \u4e0d\u60df \u4e0d\u6210 \u4e0d\u62d8 \u4e0d\u6562 \u4e0d\u65ad \u4e0d\u662f \u4e0d\u6bd4 \u4e0d\u7136 \u4e0d\u7279 \u4e0d\u72ec \u4e0d\u7ba1 \u4e0d\u80fd \u4e0d\u8981 \u4e0d\u8bba \u4e0d\u8db3 \u4e0d\u8fc7 \u4e0d\u95ee \u4e0e \u4e0e\u5176 \u4e0e\u5426 \u4e0e\u6b64\u540c\u65f6 \u4e13\u95e8 \u4e14 \u4e24\u8005 \u4e25\u683c \u4e25\u91cd \u4e2a \u4e2a\u4eba \u4e2a\u522b \u4e2d\u5c0f \u4e2d\u95f4 \u4e30\u5bcc \u4e34 \u4e3a  \u4e3a\u4e3b \u4e3a\u4e86 \u4e3a\u4ec0\u4e48 \u4e3a\u4ec0\u9ebd \u4e3a\u4f55 \u4e3a\u7740 \u4e3b\u5f20 \u4e3b\u8981 \u4e3e\u884c \u4e43 \u4e43\u81f3 \u4e48 \u4e4b \u4e4b\u4e00 \u4e4b\u524d \u4e4b\u540e \u4e4b\u5f8c \u4e4b\u6240\u4ee5 \u4e4b\u7c7b \u4e4c\u4e4e \u4e4e \u4e58 \u4e5f \u4e5f\u597d \u4e5f\u662f \u4e5f\u7f62 \u4e86 \u4e86\u89e3 \u4e89\u53d6 \u4e8e \u4e8e\u662f \u4e8e\u662f\u4e4e \u4e91\u4e91 \u4e92\u76f8 \u4ea7\u751f \u4eba\u4eec \u4eba\u5bb6 \u4ec0\u4e48 \u4ec0\u4e48\u6837 \u4ec0\u9ebd \u4eca\u540e \u4eca\u5929 \u4eca\u5e74 \u4eca\u5f8c \u4ecd\u7136 \u4ece \u4ece\u4e8b \u4ece\u800c \u4ed6 \u4ed6\u4eba \u4ed6\u4eec \u4ed6\u7684 \u4ee3\u66ff \u4ee5 \u4ee5\u4e0a \u4ee5\u4e0b \u4ee5\u4e3a \u4ee5\u4fbf \u4ee5\u514d \u4ee5\u524d \u4ee5\u53ca \u4ee5\u540e \u4ee5\u5916 \u4ee5\u5f8c \u4ee5\u6765 \u4ee5\u81f3 \u4ee5\u81f3\u4e8e \u4ee5\u81f4 \u4eec \u4efb \u4efb\u4f55 \u4efb\u51ed \u4efb\u52a1 \u4f01\u56fe \u4f1f\u5927 \u4f3c\u4e4e \u4f3c\u7684 \u4f46 \u4f46\u662f \u4f55 \u4f55\u51b5 \u4f55\u5904 \u4f55\u65f6 \u4f5c\u4e3a \u4f60 \u4f60\u4eec \u4f60\u7684 \u4f7f\u5f97 \u4f7f\u7528 \u4f8b\u5982 \u4f9d \u4f9d\u7167 \u4f9d\u9760 \u4fc3\u8fdb \u4fdd\u6301 \u4ffa \u4ffa\u4eec \u5018 \u5018\u4f7f \u5018\u6216 \u5018\u7136 \u5018\u82e5 \u5047\u4f7f \u5047\u5982 \u5047\u82e5 \u505a\u5230 \u50cf \u5141\u8bb8 \u5145\u5206 \u5148\u540e \u5148\u5f8c \u5148\u751f \u5168\u90e8 \u5168\u9762 \u516e \u5171\u540c \u5173\u4e8e \u5176 \u5176\u4e00 \u5176\u4e2d \u5176\u4e8c \u5176\u4ed6 \u5176\u4f59 \u5176\u5b83 \u5176\u5b9e  \u5176\u6b21 \u5177\u4f53 \u5177\u4f53\u5730\u8bf4 \u5177\u4f53\u8bf4\u6765 \u5177\u6709 \u518d\u8005 \u518d\u8bf4 \u5192 \u51b2 \u51b3\u5b9a \u51b5\u4e14 \u51c6\u5907 \u51e0 \u51e0\u4e4e \u51e0\u65f6 \u51ed \u51ed\u501f \u51fa\u53bb \u51fa\u6765 \u51fa\u73b0 \u5206\u522b \u5219 \u522b \u522b\u7684 \u522b\u8bf4 \u5230 \u524d\u540e \u524d\u8005 \u524d\u8fdb \u524d\u9762 \u52a0\u4e4b \u52a0\u4ee5 \u52a0\u5165 \u52a0\u5f3a \u5341\u5206 \u5373 \u5373\u4ee4 \u5373\u4f7f \u5373\u4fbf \u5373\u6216 \u5373\u82e5  \u5374\u4e0d \u539f\u6765 \u53c8 \u53ca \u53ca\u5176 \u53ca\u65f6 \u53ca\u81f3 \u53cc\u65b9 \u53cd\u4e4b \u53cd\u5e94 \u53cd\u6620 \u53cd\u8fc7\u6765 \u53cd\u8fc7\u6765\u8bf4 \u53d6\u5f97 \u53d7\u5230 \u53d8\u6210 \u53e6 \u53e6\u4e00\u65b9\u9762 \u53e6\u5916 \u53ea\u662f \u53ea\u6709 \u53ea\u8981 \u53ea\u9650 \u53eb \u53eb\u505a \u53ec\u5f00 \u53ee\u549a \u53ef \u53ef\u4ee5 \u53ef\u662f \u53ef\u80fd \u53ef\u89c1 \u5404 \u5404\u4e2a \u5404\u4eba \u5404\u4f4d \u5404\u5730 \u5404\u79cd \u5404\u7ea7 \u5404\u81ea \u5408\u7406 \u540c \u540c\u4e00 \u540c\u65f6 \u540c\u6837 \u540e\u6765 \u540e\u9762 \u5411 \u5411\u7740 \u5413 \u5417 \u5426\u5219 \u5427 \u5427\u54d2 \u5431 \u5440 \u5443 \u5455 \u5457 \u545c \u545c\u547c \u5462 \u5468\u56f4 \u5475 \u5478 \u547c\u54e7 \u548b \u548c \u549a \u54a6 \u54b1 \u54b1\u4eec \u54b3 \u54c7 \u54c8 \u54c8\u54c8 \u54c9 \u54ce \u54ce\u5440 \u54ce\u54df \u54d7 \u54df \u54e6 \u54e9 \u54ea \u54ea\u4e2a \u54ea\u4e9b \u54ea\u513f \u54ea\u5929 \u54ea\u5e74 \u54ea\u6015  \u54ea\u6837 \u54ea\u8fb9 \u54ea\u91cc \u54fc \u54fc\u5537 \u5509 \u554a \u5550 \u5565 \u5566 \u556a\u8fbe \u5582 \u558f \u5594\u5537 \u55e1\u55e1 \u55ec \u55ef \u55f3 \u560e \u560e\u767b \u5618 \u561b \u563b \u563f \u56e0 \u56e0\u4e3a \u56e0\u6b64 \u56e0\u800c \u56fa\u7136 \u5728 \u5728\u4e0b \u5730 \u575a\u51b3 \u575a\u6301 \u57fa\u672c \u5904\u7406 \u590d\u6742 \u591a \u591a\u5c11 \u591a\u6570 \u591a\u6b21 \u5927\u529b \u5927\u591a\u6570 \u5927\u5927 \u5927\u5bb6 \u5927\u6279 \u5927\u7ea6  \u5927\u91cf \u5931\u53bb \u5979 \u5979\u4eec \u5979\u7684 \u597d\u7684 \u597d\u8c61 \u5982 \u5982\u4e0a\u6240\u8ff0 \u5982\u4e0b \u5982\u4f55 \u5982\u5176 \u5982\u679c \u5982\u6b64 \u5982\u82e5 \u5b58\u5728 \u5b81 \u5b81\u53ef \u5b81\u613f \u5b81\u80af \u5b83 \u5b83\u4eec \u5b83\u4eec\u7684 \u5b83\u7684 \u5b89\u5168 \u5b8c\u5168 \u5b8c\u6210 \u5b9e\u73b0 \u5b9e\u9645 \u5ba3\u5e03 \u5bb9\u6613 \u5bc6\u5207 \u5bf9 \u5bf9\u4e8e \u5bf9\u5e94 \u5c06 \u5c11\u6570 \u5c14\u540e \u5c1a\u4e14 \u5c24\u5176 \u5c31  \u5c31\u662f \u5c31\u662f\u8bf4 \u5c3d \u5c3d\u7ba1 \u5c5e\u4e8e \u5c82\u4f46 \u5de6\u53f3 \u5de8\u5927 \u5de9\u56fa \u5df1 \u5df2\u7ecf \u5e2e\u52a9 \u5e38\u5e38 \u5e76 \u5e76\u4e0d \u5e76\u4e0d\u662f \u5e76\u4e14 \u5e76\u6ca1\u6709 \u5e7f\u5927 \u5e7f\u6cdb \u5e94\u5f53 \u5e94\u7528 \u5e94\u8be5 \u5f00\u5916 \u5f00\u59cb \u5f00\u5c55 \u5f15\u8d77 \u5f3a\u70c8 \u5f3a\u8c03 \u5f52 \u5f53 \u5f53\u524d \u5f53\u65f6 \u5f53\u7136 \u5f53\u7740 \u5f62\u6210 \u5f7b\u5e95 \u5f7c \u5f7c\u6b64 \u5f80 \u5f80\u5f80  \u5f85 \u5f8c\u6765 \u5f8c\u9762 \u5f97 \u5f97\u51fa \u5f97\u5230 \u5fc3\u91cc \u5fc5\u7136 \u5fc5\u8981 \u5fc5\u987b \u600e \u600e\u4e48 \u600e\u4e48\u529e \u600e\u4e48\u6837 \u600e\u6837 \u600e\u9ebd \u603b\u4e4b \u603b\u662f \u603b\u7684\u6765\u770b \u603b\u7684\u6765\u8bf4 \u603b\u7684\u8bf4\u6765 \u603b\u7ed3 \u603b\u800c\u8a00\u4e4b \u6070\u6070\u76f8\u53cd \u60a8 \u610f\u601d \u613f\u610f \u6162\u8bf4 \u6210\u4e3a \u6211 \u6211\u4eec \u6211\u7684 \u6216 \u6216\u662f \u6216\u8005 \u6218\u6597 \u6240 \u6240 \u4ee5 \u6240\u6709 \u6240\u8c13 \u6253 \u6269\u5927 \u628a \u6291\u6216 \u62ff \u6309 \u6309\u7167 \u6362\u53e5\u8bdd\u8bf4 \u6362\u8a00\u4e4b \u636e \u638c\u63e1 \u63a5\u7740 \u63a5\u8457 \u6545 \u6545\u6b64 \u6574\u4e2a \u65b9\u4fbf \u65b9\u9762 \u65c1\u4eba \u65e0\u5b81 \u65e0\u6cd5 \u65e0\u8bba \u65e2 \u65e2\u662f \u65e2\u7136 \u65f6\u5019 \u660e\u663e \u660e\u786e \u662f \u662f\u5426 \u662f\u7684 \u663e\u7136 \u663e\u8457 \u666e\u901a \u666e\u904d \u66f4\u52a0 \u66fe\u7ecf \u66ff \u6700\u540e \u6700\u5927 \u6700\u597d \u6700\u5f8c \u6700\u8fd1 \u6700\u9ad8 \u6709 \u6709\u4e9b \u6709\u5173 \u6709\u5229 \u6709\u529b \u6709\u6240 \u6709\u6548 \u6709\u65f6 \u6709\u70b9 \u6709\u7684 \u6709\u7740 \u6709\u8457 \u671b \u671d \u671d\u7740 \u672c \u672c\u7740 \u6765 \u6765\u7740 \u6781\u4e86 \u6784\u6210 \u679c\u7136 \u679c\u771f \u67d0 \u67d0\u4e2a \u67d0\u4e9b \u6839\u636e \u6839\u672c \u6b22\u8fce \u6b63\u5728 \u6b63\u5982 \u6b63\u5e38 \u6b64 \u6b64\u5916 \u6b64\u65f6 \u6b64\u95f4 \u6bcb\u5b81 \u6bcf  \u6bcf\u4e2a \u6bcf\u5929 \u6bcf\u5e74 \u6bcf\u5f53 \u6bd4 \u6bd4\u5982 \u6bd4\u65b9 \u6bd4\u8f83 \u6beb\u4e0d \u6ca1\u6709 \u6cbf \u6cbf\u7740 \u6ce8\u610f \u6df1\u5165 \u6e05\u695a \u6ee1\u8db3 \u6f2b\u8bf4 \u7109 \u7136\u5219 \u7136\u540e \u7136\u5f8c \u7136\u800c \u7167 \u7167\u7740 \u7279\u522b\u662f \u7279\u6b8a \u7279\u70b9 \u73b0\u4ee3 \u73b0\u5728 \u751a\u4e48 \u751a\u800c \u751a\u81f3 \u7528 \u7531 \u7531\u4e8e \u7531\u6b64\u53ef\u89c1 \u7684 \u7684\u8bdd \u76ee\u524d \u76f4\u5230 \u76f4\u63a5  \u76f8\u4f3c \u76f8\u4fe1 \u76f8\u53cd \u76f8\u540c \u76f8\u5bf9 \u76f8\u5bf9\u800c\u8a00 \u76f8\u5e94 \u76f8\u5f53 \u76f8\u7b49 \u7701\u5f97 \u770b\u51fa \u770b\u5230 \u770b\u6765 \u770b\u770b \u770b\u89c1 \u771f\u662f \u771f\u6b63 \u7740 \u7740\u5462 \u77e3 \u77e5\u9053 \u786e\u5b9a \u79bb \u79ef\u6781 \u79fb\u52a8 \u7a81\u51fa \u7a81\u7136 \u7acb\u5373 \u7b2c \u7b49 \u7b49\u7b49 \u7ba1 \u7d27\u63a5\u7740 \u7eb5 \u7eb5\u4ee4 \u7eb5\u4f7f \u7eb5\u7136 \u7ec3\u4e60 \u7ec4\u6210 \u7ecf \u7ecf\u5e38 \u7ecf \u8fc7 \u7ed3\u5408 \u7ed3\u679c \u7ed9 \u7edd\u5bf9 \u7ee7\u7eed \u7ee7\u800c \u7ef4\u6301 \u7efc\u4e0a\u6240\u8ff0 \u7f62\u4e86 \u8003\u8651 \u8005 \u800c \u800c\u4e14 \u800c\u51b5 \u800c\u5916 \u800c\u5df2 \u800c\u662f \u800c\u8a00 \u8054\u7cfb \u80fd \u80fd\u5426 \u80fd\u591f \u817e \u81ea \u81ea\u4e2a\u513f \u81ea\u4ece \u81ea\u5404\u513f \u81ea\u5bb6 \u81ea\u5df1 \u81ea\u8eab \u81f3 \u81f3\u4e8e \u826f\u597d \u82e5 \u82e5\u662f \u82e5\u975e \u8303\u56f4 \u83ab\u82e5 \u83b7\u5f97 \u867d \u867d\u5219 \u867d\u7136 \u867d\u8bf4 \u884c\u4e3a \u884c\u52a8 \u8868\u660e \u8868\u793a \u88ab \u8981 \u8981\u4e0d \u8981\u4e0d\u662f \u8981\u4e0d\u7136 \u8981\u4e48 \u8981\u662f \u8981\u6c42 \u89c4\u5b9a \u89c9\u5f97 \u8ba4\u4e3a \u8ba4\u771f \u8ba4\u8bc6 \u8ba9 \u8bb8\u591a \u8bba \u8bbe\u4f7f \u8bbe\u82e5 \u8be5 \u8bf4\u660e \u8bf8\u4f4d \u8c01 \u8c01\u77e5 \u8d76 \u8d77 \u8d77\u6765 \u8d77\u89c1 \u8d81 \u8d81\u7740 \u8d8a\u662f \u8ddf \u8f6c\u52a8 \u8f6c\u53d8 \u8f6c\u8d34 \u8f83 \u8f83\u4e4b \u8fb9 \u8fbe \u5230 \u8fc5\u901f \u8fc7 \u8fc7\u53bb \u8fc7\u6765 \u8fd0\u7528 \u8fd8\u662f \u8fd8\u6709 \u8fd9 \u8fd9\u4e2a \u8fd9\u4e48 \u8fd9\u4e48\u4e9b \u8fd9\u4e48\u6837 \u8fd9\u4e48\u70b9\u513f \u8fd9\u4e9b \u8fd9\u4f1a\u513f \u8fd9\u513f \u8fd9\u5c31\u662f\u8bf4 \u8fd9\u65f6 \u8fd9\u6837 \u8fd9\u70b9 \u8fd9\u79cd \u8fd9\u8fb9 \u8fd9\u91cc \u8fd9\u9ebd \u8fdb\u5165 \u8fdb\u6b65 \u8fdb\u800c \u8fdb\u884c \u8fde \u8fde\u540c \u9002\u5e94 \u9002\u5f53 \u9002\u7528 \u9010\u6b65 \u9010\u6e10 \u901a\u5e38 \u901a\u8fc7 \u9020\u6210 \u9047\u5230 \u906d\u5230 \u907f\u514d \u90a3 \u90a3\u4e2a \u90a3\u4e48 \u90a3\u4e48\u4e9b \u90a3\u4e48\u6837 \u90a3\u4e9b \u90a3\u4f1a\u513f \u90a3\u513f \u90a3\u65f6 \u90a3\u6837 \u90a3\u8fb9 \u90a3\u91cc \u90a3\u9ebd \u90e8\u5206 \u9119\u4eba \u91c7\u53d6 \u91cc\u9762 \u91cd\u5927 \u91cd\u65b0 \u91cd\u8981 \u9274\u4e8e \u95ee\u9898 \u9632\u6b62 \u963f \u9644\u8fd1 \u9650\u5236 \u9664 \u9664\u4e86 \u9664\u6b64\u4e4b\u5916 \u9664\u975e \u968f \u968f\u7740 \u968f\u8457 \u96c6\u4e2d \u9700\u8981 \u975e \u4f46 \u975e\u5e38 \u975e\u5f92 \u9760 \u987a \u987a\u7740 \u9996\u5148 \u9ad8\u5174 \u662f\u4e0d\u662f</p> <p><pre><code>from nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.text import Text\ninput_str = \"Today's weather is good, very windy and suny, we have no classes in the afternoon,we have to play baketball tomorrow.\" \ntokens = word_tokenize(input_str)\ntest_words = [word.lower()for word in tokens]\ntest_words_set = set(test_words)\nprint(test_words_set.intersection(set(stopwords.words('english'))))\n</code></pre> output:{'have', 'to', 'and', 'no', 'is', 'in', 'very', 'the', 'we'}</p> <p>\u8fc7\u6ee4\u6389\u505c\u7528\u8bcd: <pre><code>filtered = [w for w in test_words_set if(w not in stopwords.words('english'))]\nprint(filtered)\n</code></pre> output:[',', 'classes', 'afternoon', \"'s\", 'baketball', 'suny', 'windy', 'today', 'weather', 'good', '.', 'play', 'tomorrow']</p>"},{"location":"nlp1/#_14","title":"\u8bcd\u6027\u6807\u6ce8","text":"\u7f29\u5199 \u5168\u79f0 \u4e2d\u6587\u91ca\u4e49 \u793a\u4f8b CC Coordinating conjunction \u8fde\u63a5\u8bcd and, or, but CD Cardinal number \u57fa\u6570\u8bcd one, two, three DT Determiner \u9650\u5b9a\u8bcd this, that, these, those, no, some, any EX Existential there \u5b58\u5728\u53e5 There is a book on the table. FW Foreign word \u5916\u6765\u8bcd ketchup, sushi IN Preposition or subordinating conjunction \u4ecb\u8bcd\u6216\u4ece\u5c5e\u8fde\u8bcd in, on, at, because, if JJ Adjective \u5f62\u5bb9\u8bcd\u6216\u5e8f\u6570\u8bcd big, small, first JJR Adjective, comparative \u5f62\u5bb9\u8bcd\u6bd4\u8f83\u7ea7 bigger, smaller JJS Adjective, superlative \u5f62\u5bb9\u8bcd\u6700\u9ad8\u7ea7 biggest, smallest LS List item marker \u5217\u8868\u6807\u793a 1., 2., A., B. MD Modal \u60c5\u6001\u52a9\u52a8\u8bcd can, could, will, would NN Noun, singular or mass \u5e38\u7528\u540d\u8bcd \u5355\u6570\u5f62\u5f0f book, water NNS Noun, plural \u5e38\u7528\u540d\u8bcd \u590d\u6570\u5f62\u5f0f books, tables NNP Proper noun, singular \u4e13\u6709\u540d\u8bcd\uff0c\u5355\u6570\u5f62\u5f0f China, John NNPS Proper noun, plural \u4e13\u6709\u540d\u8bcd\uff0c\u590d\u6570\u5f62\u5f0f the United States, the Smiths PDT Predeterminer \u524d\u4f4d\u9650\u5b9a\u8bcd all, both, half POS Possessive ending \u6240\u6709\u683c\u7ed3\u675f\u8bcd 's, s' PRP Personal pronoun \u4eba\u79f0\u4ee3\u8bcd I, you, he, she, it PRP$ Possessive pronoun \u6240\u6709\u683c\u4ee3\u540d\u8bcd my, your, his, her, its RB Adverb \u526f\u8bcd quickly, slowly RBR Adverb, comparative \u526f\u8bcd\u6bd4\u8f83\u7ea7 more quickly, more slowly RBS Adverb, superlative \u526f\u8bcd\u6700\u9ad8\u7ea7 most quickly, most slowly RP Particle \u5c0f\u54c1\u8bcd up, down, in, out SYM Symbol \u7b26\u53f7 +, -, *, / TO to (as preposition or infinitive marker) to \u4f5c\u4e3a\u4ecb\u8bcd\u6216\u4e0d\u5b9a\u5f0f\u683c\u5f0f to the park, to go UH Interjection \u611f\u53f9\u8bcd oh, ah, ouch VB Verb, base form \u52a8\u8bcd\u57fa\u672c\u5f62\u5f0f go, do, have VBD Verb, past tense \u52a8\u8bcd\u8fc7\u53bb\u5f0f went, did, had VBG Verb, gerund or present participle \u52a8\u540d\u8bcd\u548c\u73b0\u5728\u5206\u8bcd going, doing, having VBN Verb, past participle \u8fc7\u53bb\u5206\u8bcd gone, done, had VBP Verb, non - 3<sup>rd</sup> person singular present \u52a8\u8bcd\u975e\u7b2c\u4e09\u4eba\u79f0\u5355\u6570 go, do, have (I go, you do, we have) VBZ Verb, 3<sup>rd</sup> person singular present \u52a8\u8bcd\u7b2c\u4e09\u4eba\u79f0\u5355\u6570 goes, does, has (he goes, she does, it has) WDT Wh - determiner \u9650\u5b9a\u8bcd whose, which, what (in relative or interrogative sentences) WP Wh - pronoun \u4ee3\u8bcd who, whose, which WP$ Possessive wh - pronoun \u6240\u6709\u683c\u4ee3\u8bcd whose WRB Wh - adverb \u7591\u95ee\u4ee3\u8bcd how, where, when <pre><code>import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\ninput_str = \"Today's weather is good, very windy and suny, we have no classes in the afternoon,we have to play baketball tomorrow.\" \ntokens = word_tokenize(input_str)\ntest_words = [word.lower()for word in tokens]\ntags = pos_tag(tokens)\nprint(tags)\n</code></pre> <p>output: [('Today', 'NN'), (\"'s\", 'POS'), ('weather', 'NN'), ('is', 'VBZ'), ('good', 'JJ'), (',', ','), ('very', 'RB'), ('windy', 'JJ'), ('and', 'CC'), ('suny', 'JJ'), (',', ','), ('we', 'PRP'), ('have', 'VBP'), ('no', 'DT'), ('classes', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('afternoon', 'NN'), (',', ','), ('we', 'PRP'), ('have', 'VBP'), ('to', 'TO'), ('play', 'VB'), ('baketball', 'DT'), ('tomorrow', 'NN'), ('.', '.')]</p>"},{"location":"nlp1/#_15","title":"\u5206\u5757","text":"<p><pre><code>import nltk\nfrom nltk.chunk import RegexpParser\nsentence = [('the','DT'),('little','JJ'),('yellow','JJ'),('dog','NN'),('died','VBD')]                                                          \ngrammer = \"MY_NP:{&lt;DT&gt;?&lt;JJ&gt;*&lt;NN&gt;}\"\ncp=nltk.RegexpParser(grammer)#\u751f\u6210\u89c4\u5219\nresult=cp.parse(sentence)#\u8fdb\u884c\u5206\u5757\nprint(result)\nresult.draw()#\u8c03\u7528matplotlib\u5e93\u753b\u51fa\u6765\n</code></pre> output:(S (MY_NP the/DT little/JJ yellow/JJ dog/NN) died/VBD) \u56fe\u72473</p>"},{"location":"nlp1/#_16","title":"\u547d\u540d\u5b9e\u4f53","text":"<p><pre><code>from nltk import ne_chunk\nsentence = \"Edison went to Tsinghua University today\"\nprint(ne_chunk(pos_tag(word_tokenize(sentence))))\n</code></pre> output: (S   (PERSON Edison/NNP)   went/VBD   to/TO   (ORGANIZATION Tsinghua/NNP University/NNP)   today/NN)</p>"},{"location":"nlp1/#_17","title":"\u6570\u636e\u6e05\u6d17\u5b9e\u4f8b","text":"<p><pre><code>import re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# \u8f93\u5165\u6570\u636e\ns = 'RT @Amila #Test\\nTom\\'s newly listed Co &amp; Mary\\'s unlisted Group to supply tech for nlTK.\\nh$TSLA$AAPL https://t.co/x34afs'\n\n# \u6307\u5b9a\u505c\u7528\u8bcd\ncache_english_stopwords = stopwords.words('english')\n\ndef text_clean(text):\n    print('\u539f\u59cb\u6570\u636e:', text, '\\n')\n\n    # \u53bb\u6389HTML\u6807\u7b7e(e.g. &amp;amp;)\n    text_no_special_entities = re.sub(r'\\&amp;\\w*;|#\\w*|@\\w*', '', text)\n    print('\u53bb\u6389\u7279\u6b8a\u6807\u7b7e\u540e\u7684:', text_no_special_entities, '\\n')\n\n    # \u53bb\u6389\u4e00\u4e9b\u4ef7\u503c\u7b26\u53f7\n    text_no_tickers = re.sub(r'\\$\\w*', '', text_no_special_entities)\n    print('\u53bb\u6389\u4ef7\u503c\u7b26\u53f7\u540e\u7684:', text_no_tickers, '\\n')\n\n    # \u53bb\u6389\u8d85\u94fe\u63a5\n    text_no_hyperlinks = re.sub(r'https?://\\S+|www\\.\\S+', '', text_no_tickers)\n    print('\u53bb\u6389\u8d85\u94fe\u63a5\u540e\u7684:', text_no_hyperlinks, '\\n')\n\n    # \u53bb\u6389\u4e00\u4e9b\u4e13\u95e8\u540d\u8bcd\u7f29\u5199\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5b57\u6bcd\u6bd4\u8f83\u5c11\u7684\u8bcd\n    text_no_small_words = re.sub(r'\\b\\w{1,2}\\b', '', text_no_hyperlinks)\n    print('\u53bb\u6389\u4e13\u95e8\u540d\u8bcd\u7f29\u5199\u540e:', text_no_small_words, '\\n')\n\n    # \u53bb\u6389\u591a\u4f59\u7684\u7a7a\u683c\n    text_no_whitespace = re.sub(r'\\s+', ' ', text_no_small_words)\n    text_no_whitespace = text_no_whitespace.strip()\n    print('\u53bb\u6389\u7a7a\u683c\u540e\u7684:', text_no_whitespace, '\\n')\n\n    # \u5206\u8bcd\n    tokens = word_tokenize(text_no_whitespace)\n    print('\u5206\u8bcd\u7ed3\u679c:', tokens, '\\n')\n\n    # \u53bb\u505c\u7528\u8bcd\n    list_no_stopwords = [i for i in tokens if i not in cache_english_stopwords]\n    print('\u53bb\u505c\u7528\u8bcd\u540e\u7ed3\u679c:', list_no_stopwords, '\\n')\n\n    # \u8fc7\u6ee4\u540e\u7ed3\u679c\n    text_filtered = ' '.join(list_no_stopwords)  # ' '.join() would join with spaces between words.\n    print('\u8fc7\u6ee4\u540e:', text_filtered)\n\ntext_clean(s)\n</code></pre> output: \u539f\u59cb\u6570\u636e: RT @Amila #Test Tom's newly listed Co &amp; Mary's unlisted Group to supply tech for nlTK. h\\(TSLA\\)AAPL https://t.co/x34afs</p> <p>\u53bb\u6389\u7279\u6b8a\u6807\u7b7e\u540e\u7684: RT Tom's newly listed Co &amp; Mary's unlisted Group to supply tech for nlTK. h\\(TSLA\\)AAPL https://t.co/x34afs</p> <p>\u53bb\u6389\u4ef7\u503c\u7b26\u53f7\u540e\u7684: RT Tom's newly listed Co &amp; Mary's unlisted Group to supply tech for nlTK. h https://t.co/x34afs</p> <p>\u53bb\u6389\u8d85\u94fe\u63a5\u540e\u7684: RT Tom's newly listed Co &amp; Mary's unlisted Group to supply tech for nlTK. h</p> <p>\u53bb\u6389\u4e13\u95e8\u540d\u8bcd\u7f29\u5199\u540e: Tom' newly listed  &amp; Mary' unlisted Group  supply tech for nlTK.</p> <p>\u53bb\u6389\u7a7a\u683c\u540e\u7684: Tom' newly listed &amp; Mary' unlisted Group supply tech for nlTK.</p> <p>\u5206\u8bcd\u7ed3\u679c: ['Tom', \"'\", 'newly', 'listed', '&amp;', 'Mary', \"'\", 'unlisted', 'Group', 'supply', 'tech', 'for', 'nlTK', '.']</p> <p>\u53bb\u505c\u7528\u8bcd\u540e\u7ed3\u679c: ['Tom', \"'\", 'newly', 'listed', '&amp;', 'Mary', \"'\", 'unlisted', 'Group', 'supply', 'tech', 'nlTK', '.']</p> <p>\u8fc7\u6ee4\u540e: Tom ' newly listed &amp; Mary ' unlisted Group supply tech nlTK .</p>"},{"location":"nlp1/#spacy","title":"Spacy\u5de5\u5177\u5305","text":"<p><pre><code>import spacy\nnlp = spacy.load('en_core_web_sm')\ndoc = nlp('Weather is good, very windy and sunny. We have no classes in the afternoon.')\n#\u5206\u8bcd\nfor token in doc:\n    print(token)\n#\u5206\u53e5\nfor sent in doc.sents:\n    print(sent)\n#\u8bcd\u6027\nfor token in doc:\n    print('{}-{}'.format(token,token.pos_))\n</code></pre> output: Weather is good , very windy and sunny . We have no classes in the afternoon . Weather is good, very windy and sunny. We have no classes in the afternoon. Weather-NOUN is-AUX good-ADJ ,-PUNCT very-ADV windy-ADJ and-CCONJ sunny-ADJ .-PUNCT We-PRON have-VERB no-DET classes-NOUN in-ADP the-DET afternoon-NOUN .-PUNCT   </p>"},{"location":"nlp1/#_18","title":"\u547d\u540d\u4f53\u8bc6\u522b","text":"<p><pre><code>import spacy\nnlp = spacy.load('en_core_web_sm')\ndoc = nlp('I went to Paris where I met my old friend Jack from uni.')\n\nfor ent in doc.ents:\n    print('{}-{}'.format(ent,ent.label_))\n</code></pre> output: Paris-GPE Jack-PERSON</p>"},{"location":"nlp1/#_19","title":"\u7ed3\u5df4\u5206\u8bcd\u5668","text":"<p><pre><code>import jieba\n\nseg_list = jieba.cut(\"\u6211\u6765\u5230\u5317\u4eac\u6e05\u534e\u5927\u5b66\", cut_all=True)\nprint(\"\u5168\u6a21\u5f0f: \" + \"/\".join(seg_list))  # \u5168\u6a21\u5f0f\n\nseg_list = jieba.cut(\"\u6211\u6765\u5230\u5317\u4eac\u6e05\u534e\u5927\u5b66\", cut_all=False)\nprint(\"\u7cbe\u786e\u6a21\u5f0f: \" + \"/\".join(seg_list))  # \u7cbe\u786e\u6a21\u5f0f\n\nseg_list = jieba.cut(\"\u4ed6\u6765\u5230\u4e86\u7f51\u6613\u676d\u7814\u5927\u53a6\")  # \u9ed8\u8ba4\u662f\u7cbe\u786e\u6a21\u5f0f\nprint(\", \".join(seg_list))\n</code></pre> output: \u5168\u6a21\u5f0f: \u6211/\u6765\u5230/\u5317\u4eac/\u6e05\u534e/\u6e05\u534e\u5927\u5b66/\u534e\u5927/\u5927\u5b66 \u7cbe\u786e\u6a21\u5f0f: \u6211/\u6765\u5230/\u5317\u4eac/\u6e05\u534e\u5927\u5b66 \u4ed6, \u6765\u5230, \u4e86, \u7f51\u6613, \u676d\u7814, \u5927\u53a6</p>"},{"location":"nlp1/#_20","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bcd\u5178","text":"<p><pre><code>import jieba\n\njieba.load_userdict(\"D:\\zyj's notebook\\zyj-s-notebook\\mydict.txt\")  # \u9700UTF-8\uff0c\u53ef\u4ee5\u5728\u53e6\u5b58\u4e3a\u91cc\u9762\u8bbe\u7f6e\n\n# \u4e5f\u53ef\u4ee5\u7528jieba.add_word(\"\u4e7e\u6e05\u5bab\")\ntext = \"\u6545\u5bab\u7684\u8457\u540d\u666f\u70b9\u5305\u62ec\u4e7e\u6e05\u5bab\u3001\u592a\u548c\u6bbf\u548c\u9ec4\u7409\u7483\u74e6\u7b49\"\n\n# \u5168\u6a21\u5f0f\nseg_list = jieba.cut(text, cut_all=True)\nprint(u\"[\u5168\u6a21\u5f0f]: \", \"/\".join(seg_list))\n\n# \u7cbe\u786e\u6a21\u5f0f\nseg_list = jieba.cut(text, cut_all=False)\nprint(u\"[\u7cbe\u786e\u6a21\u5f0f]: \", \"/\".join(seg_list))\n</code></pre> output:</p>"},{"location":"nlp1/#_21","title":"\u5173\u952e\u8bcd\u62bd\u53d6","text":"<p><pre><code>import jieba\n\njieba.load_userdict(\"D:\\zyj's notebook\\zyj-s-notebook\\mydict.txt\")  # \u9700UTF-8\uff0c\u53ef\u4ee5\u5728\u53e6\u5b58\u4e3a\u91cc\u9762\u8bbe\u7f6e\n\n# \u4e5f\u53ef\u4ee5\u7528jieba.add_word(\"\u4e7e\u6e05\u5bab\")\ntext = \"\u6545\u5bab\u7684\u8457\u540d\u666f\u70b9\u5305\u62ec\u4e7e\u6e05\u5bab\u3001\u592a\u548c\u6bbf\u548c\u9ec4\u7409\u7483\u74e6\u7b49\"\n\nimport jieba.analyse\n\nseg_list = jieba.cut(text, cut_all=False)\nprint(u\"\u5206\u8bcd\u7ed3\u679c:\")\nprint(\"/\".join(seg_list))\n\n# \u83b7\u53d6\u5173\u952e\u8bcd\ntags = jieba.analyse.extract_tags(text, topK=5)\nprint(u\"\u5173\u952e\u8bcd:\")\nprint(\" \".join(tags))\ntags = jieba.analyse.extract_tags(text, topK=5, withWeight=True)\nfor word, weight in tags:\n    print(word, weight)\n</code></pre> output: \u5206\u8bcd\u7ed3\u679c: \u6545\u5bab/\u7684/\u8457\u540d\u666f\u70b9/\u5305\u62ec/\u4e7e\u6e05\u5bab/\u3001/\u592a\u548c\u6bbf/\u548c/\u9ec4\u7409\u7483\u74e6/\u7b49 \u5173\u952e\u8bcd: \u8457\u540d\u666f\u70b9 \u4e7e\u6e05\u5bab \u9ec4\u7409\u7483\u74e6 \u592a\u548c\u6bbf \u6545\u5bab \u8457\u540d\u666f\u70b9 2.3167796086666668 \u4e7e\u6e05\u5bab 1.9924612504833332 \u9ec4\u7409\u7483\u74e6 1.9924612504833332 \u592a\u548c\u6bbf 1.6938346722833335 \u6545\u5bab 1.5411195503033335</p>"},{"location":"nlp1/#_22","title":"\u8bcd\u6027\u6807\u6ce8","text":"<p><pre><code>import jieba.posseg as pseg\n\nwords = pseg.cut(\"\u6211\u7231\u5317\u4eac\u5929\u5b89\u95e8\")\nfor word, flag in words:\n    print(\"%s %s\" % (word, flag))\n</code></pre> output: \u6211 r \u7231 v \u5317\u4eac ns \u5929\u5b89\u95e8 ns</p>"},{"location":"nlp1/#_23","title":"\u8bcd\u4e91\u5c55\u793a","text":"<p>\u5148\u5c06\u505c\u7528\u8bcd\u5199\u6210\u4e00\u4e2atxt: <pre><code>import nltk\nfrom nltk.corpus import stopwords\n\n# \u83b7\u53d6\u4e2d\u6587\u505c\u7528\u8bcd\u8868\nchinese_stopwords = stopwords.words('chinese')\n\n# \u6307\u5b9a\u8981\u5199\u5165\u7684\u6587\u4ef6\u8def\u5f84\nfile_path = 'stopwords.txt'  \n\n# \u5c06\u505c\u7528\u8bcd\u8868\u5199\u5165\u6587\u4ef6\nwith open(file_path, 'w', encoding='utf-8') as file:\n    for word in chinese_stopwords:\n        file.write(word + '\\n')\n</code></pre> <pre><code>import jieba\nfrom wordcloud import WordCloud\nimport imageio\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n# \u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u548c\u505c\u7528\u8bcd\u8868\nwith open('19\u5927.txt', 'r', encoding='utf-8') as text_file:\n    text = text_file.read()\nwith open('stopwords.txt', encoding='utf-8') as file:\n    stopwords = {line.strip() for line in file}\n\n# \u5206\u8bcd\u5e76\u7edf\u8ba1\u8bcd\u9891\uff0c\u9664\u53bb\u505c\u7528\u8bcd\nseg_list = jieba.cut(text, cut_all=False)\ndata = {}\nfor word in seg_list:\n    if len(word) &gt;= 2 and word not in stopwords:\n        if word not in data:\n            data[word] = 0\n        data[word] += 1\n\n# \u8bfb\u53d6\u906e\u7f69\u56fe\u7247\nmask = imageio.imread('\u56fe\u7247\\\\th.jpg')  # \u786e\u4fdd\u8def\u5f84\u6b63\u786e\n\n# \u521b\u5efa\u8bcd\u4e91\u5bf9\u8c61\nmy_wordcloud = WordCloud(\n    background_color='white',  # \u8bbe\u7f6e\u80cc\u666f\u989c\u8272\n    max_words=400,  # \u8bbe\u7f6e\u6700\u5927\u5b9e\u73b0\u7684\u5b57\u6570\n    font_path=r'SimHei.ttf',  # \u8bbe\u7f6e\u5b57\u4f53\u683c\u5f0f\uff0c\u5982\u4e0d\u8bbe\u7f6e\u663e\u793a\u4e0d\u4e86\u4e2d\u6587\n    mask=mask,  # \u6307\u5b9a\u5728\u4ec0\u4e48\u56fe\u7247\u4e0a\u753b\n    width=1000,\n    height=1000,\n    stopwords=stopwords\n).generate_from_frequencies(data)\n\n# \u5c55\u793a\u8bcd\u4e91\nplt.figure(figsize=(18, 16))\nplt.imshow(my_wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()  # \u5c55\u793a\u8bcd\u4e91\n\n# \u4fdd\u5b58\u8bcd\u4e91\u56fe\u50cf\nmy_wordcloud.to_file('result.jpg')\n</code></pre> result:\u56fe\u7247\u56db</p>"},{"location":"nlp2/","title":"Nlp2","text":"<p> \u7ea6 0 \u4e2a\u5b57 </p>"},{"location":"pandas/","title":"pandas","text":"<p> \u7ea6 1140 \u4e2a\u5b57  39 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p> <p>https://www.kaggle.com/learn/pandas</p>"},{"location":"pandas/#creating-reading-and-writing","title":"Creating, Reading and Writing","text":""},{"location":"pandas/#_1","title":"\u5165\u95e8","text":"<p>\u8981\u4f7f\u7528 pandas\uff0c\u901a\u5e38\u4f60\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4ee3\u7801\u884c\u5f00\u59cb\uff1a</p> <pre><code>import pandas as pd\n</code></pre>"},{"location":"pandas/#_2","title":"\u521b\u5efa\u6570\u636e","text":"<p>pandas \u4e2d\u6709\u4e24\u4e2a\u6838\u5fc3\u5bf9\u8c61\uff1aDataFrame \u548c Series\u3002</p>"},{"location":"pandas/#dataframe","title":"DataFrame","text":"<p>DataFrame \u662f\u4e00\u4e2a\u8868\u683c\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u5355\u72ec\u6761\u76ee\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6761\u76ee\u90fd\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\u3002\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u4e00\u884c\uff08\u6216\u8bb0\u5f55\uff09\u548c\u4e00\u5217\u3002</p> <p>\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u7b80\u5355\u7684 DataFrame\uff1a</p> <pre><code>pd.DataFrame({'Yes': [50, 21], 'No': [131, 2]})\n</code></pre> <p>\u8f93\u51fa\uff1a</p> Yes No 50 131 21 2 <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u201c0, No\u201d \u6761\u76ee\u7684\u503c\u4e3a 131\u3002\u201c0, Yes\u201d \u6761\u76ee\u7684\u503c\u4e3a 50\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p> <p>DataFrame \u7684\u6761\u76ee\u4e0d\u9650\u4e8e\u6574\u6570\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u503c\u4e3a\u5b57\u7b26\u4e32\u7684 DataFrame\uff1a</p> <pre><code>pd.DataFrame({'Bob': ['I liked it.', 'It was awful.'], 'Sue': ['Pretty good.', 'Bland.']})\n</code></pre> <p>\u8f93\u51fa\uff1a</p> Bob Sue I liked it. Pretty good. It was awful. Bland. <p>\u6211\u4eec\u4f7f\u7528 <code>pd.DataFrame()</code> \u6784\u9020\u51fd\u6570\u6765\u751f\u6210\u8fd9\u4e9b DataFrame \u5bf9\u8c61\u3002\u58f0\u660e\u4e00\u4e2a\u65b0\u7684 DataFrame \u7684\u8bed\u6cd5\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u952e\u662f\u5217\u540d\uff08\u5728\u6b64\u793a\u4f8b\u4e2d\u4e3a Bob \u548c Sue\uff09\uff0c\u5176\u503c\u662f\u6761\u76ee\u5217\u8868\u3002\u8fd9\u662f\u6784\u9020\u65b0 DataFrame \u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u4e5f\u662f\u4f60\u6700\u53ef\u80fd\u9047\u5230\u7684\u65b9\u6cd5\u3002</p> <p>\u5b57\u5178 - \u5217\u8868\u6784\u9020\u51fd\u6570\u4e3a\u5217\u6807\u7b7e\u8d4b\u503c\uff0c\u4f46\u4ec5\u5c06\u884c\u6807\u7b7e\u6309\u4ece 0 \u5f00\u59cb\u7684\u8ba1\u6570 (0, 1, 2, 3, \u2026) \u8d4b\u503c\u3002\u6709\u65f6\u8fd9\u6ca1\u95ee\u9898\uff0c\u4f46\u901a\u5e38\u6211\u4eec\u5e0c\u671b\u81ea\u5df1\u5206\u914d\u8fd9\u4e9b\u6807\u7b7e\u3002</p> <p>DataFrame \u4e2d\u4f7f\u7528\u7684\u884c\u6807\u7b7e\u5217\u8868\u79f0\u4e3a \u7d22\u5f15\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528 <code>index</code> \u53c2\u6570\u4e3a\u5176\u8d4b\u503c\uff1a</p> <pre><code>pd.DataFrame({'Bob': ['I liked it.', 'It was awful.'],\n              'Sue': ['Pretty good.', 'Bland.']},\n             index=['Product A', 'Product B'])\n</code></pre> <p>\u8f93\u51fa\uff1a</p> Bob Sue Product A I liked it. Pretty good. Product B It was awful. Bland."},{"location":"pandas/#series","title":"Series","text":"<p>\u76f8\u6bd4\u4e4b\u4e0b\uff0cSeries \u662f\u4e00\u4e2a\u6570\u636e\u503c\u5e8f\u5217\u3002\u5982\u679c DataFrame \u662f\u4e00\u4e2a\u8868\u683c\uff0cSeries \u5c31\u662f\u4e00\u4e2a\u5217\u8868\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ea\u9700\u4e00\u4e2a\u5217\u8868\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a Series\uff1a</p> <pre><code>pd.Series([1, 2, 3, 4, 5])\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n</code></pre> <p>\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0cSeries \u662f DataFrame \u7684\u5355\u4e2a\u5217\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u50cf\u4e4b\u524d\u4e00\u6837\u4f7f\u7528 <code>index</code> \u53c2\u6570\u4e3a Series \u5206\u914d\u884c\u6807\u7b7e\u3002\u4f46\u662f\uff0cSeries \u6ca1\u6709\u5217\u540d\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a\u6574\u4f53\u540d\u79f0\uff1a</p> <pre><code>pd.Series([30, 35, 40], index=['2015 Sales', '2016 Sales', '2017 Sales'], name='Product A')\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>2015 Sales    30\n2016 Sales    35\n2017 Sales    40\nName: Product A, dtype: int64\n</code></pre> <p>Series \u548c DataFrame \u5bc6\u5207\u76f8\u5173\u3002\u5c06 DataFrame \u770b\u4f5c\u662f\u4e00\u5806 Series \u201c\u7c98\u5408\u201d \u5728\u4e00\u8d77\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u4e0b\u4e00\u90e8\u5206\u4e2d\u770b\u5230\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002</p>"},{"location":"pandas/#_3","title":"\u8bfb\u53d6\u6570\u636e\u6587\u4ef6","text":"<p>\u80fd\u591f\u624b\u52a8\u521b\u5efa DataFrame \u6216 Series \u5f88\u65b9\u4fbf\u3002\u4f46\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u521b\u5efa\u81ea\u5df1\u7684\u6570\u636e\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u5904\u7406\u5df2\u6709\u7684\u6570\u636e\u3002</p> <p><code>pd.read_csv()</code> \u51fd\u6570\u529f\u80fd\u5f3a\u5927\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a 30 \u591a\u4e2a\u53ef\u9009\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u96c6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230 CSV \u6587\u4ef6\u6709\u4e00\u4e2a\u5185\u7f6e\u7d22\u5f15\uff0c\u800c pandas \u6ca1\u6709\u81ea\u52a8\u8bc6\u522b\u5b83\u3002\u4e3a\u4e86\u8ba9 pandas \u4f7f\u7528\u8be5\u5217\u4f5c\u4e3a\u7d22\u5f15\uff08\u800c\u4e0d\u662f\u4ece\u5934\u521b\u5efa\u4e00\u4e2a\u65b0\u7d22\u5f15\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a <code>index_col</code>\u3002</p> <pre><code>wine_reviews = pd.read_csv('../input/wine-reviews/winemag-data-130k-v2.csv', index_col=0)\nwine_reviews.head()\n</code></pre> <p>\u8f93\u51fa\uff1a</p> country description designation points price province region_1 region_2 taster_name taster_twitter_handle Italy Aromas include tropical fruit, broom, brimstone\u2026 Val delle Rose - Vulk\u00e0 Bianco 87 NaN Sicily &amp; Sardinia Etna NaN Kevin O'Keefe @kerinokeefe Portugal This is ripe and fruity, a wine that\u2026 Avidagos 87 15.0 Douro NaN NaN Roger Voss @vossroger US Tart and snappy, the flavors flash\u2026 Late Harvest 87 14.0 Oregon Willamette Valley Willamette Valley Paul Gregutt @paulgwine US Pineapple, lemon pith and orange blossom\u2026 Reserve 87 13.0 Michigan Michigan Shore NaN Alexander Peartree NaN <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u52a0\u8f7d\u6570\u636e\u5e76\u8fdb\u884c\u5206\u6790\u4e86\u3002</p>"},{"location":"pandas/#lociloc","title":"loc\u548ciloc","text":"<p>\u5728\u9009\u62e9\u6216\u5728 <code>loc</code> \u548c <code>iloc</code> \u4e4b\u95f4\u8f6c\u6362\u65f6\uff0c\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u201c\u9677\u9631\u201d\uff0c\u90a3\u5c31\u662f\u8fd9\u4e24\u79cd\u65b9\u6cd5\u4f7f\u7528\u4e86\u7565\u6709\u4e0d\u540c\u7684\u7d22\u5f15\u65b9\u6848\u3002</p> <p><code>iloc</code> \u4f7f\u7528\u7684\u662f Python \u6807\u51c6\u5e93\u7684\u7d22\u5f15\u65b9\u6848\uff0c\u5176\u4e2d\u8303\u56f4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f1a\u88ab\u5305\u542b\uff0c\u800c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f1a\u88ab\u6392\u9664\u3002\u56e0\u6b64\uff0c<code>0:10</code> \u4f1a\u9009\u62e9\u7d22\u5f15\u4e3a 0 \u5230 9 \u7684\u6761\u76ee\u3002\u800c <code>loc</code> \u5219\u662f\u5305\u542b\u5f0f\u7684\u7d22\u5f15\u65b9\u5f0f\u3002\u6240\u4ee5\uff0c<code>0:10</code> \u4f1a\u9009\u62e9\u7d22\u5f15\u4e3a 0 \u5230 10 \u7684\u6761\u76ee\u3002</p> <p>\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u53d8\u5316\u5462\uff1f\u8bb0\u4f4f\uff0c<code>loc</code> \u53ef\u4ee5\u7d22\u5f15\u4efb\u4f55\u6807\u51c6\u5e93\u7c7b\u578b\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6570\u636e\u6846\uff0c\u5176\u7d22\u5f15\u503c\u4e3a\u201c\u82f9\u679c\u201d\u2026\u2026\u201c\u571f\u8c46\u201d\u2026\u2026\uff0c\u5982\u679c\u6211\u4eec\u60f3\u9009\u62e9\u201c\u82f9\u679c\u201d\u548c\u201c\u571f\u8c46\u201d\u4e4b\u95f4\u7684\u6240\u6709\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u6c34\u679c\u9009\u9879\uff0c\u90a3\u4e48\u4f7f\u7528 <code>df.loc['Apples':'Potatoes']</code> \u6bd4\u4f7f\u7528\u7c7b\u4f3c <code>df.loc['Apples', 'Potatoet']</code>\uff08\u56e0\u4e3a\u5b57\u6bcd\u201ct\u201d\u5728\u5b57\u6bcd\u201cs\u201d\u4e4b\u540e\uff09\u8981\u65b9\u4fbf\u5f97\u591a\u3002</p> <p>\u5f53\u6570\u636e\u6846\u7684\u7d22\u5f15\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u5b57\u5217\u8868\uff0c\u6bd4\u5982 0\u2026\u20261000 \u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c24\u5176\u4ee4\u4eba\u56f0\u60d1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>df.iloc[0:1000]</code> \u4f1a\u8fd4\u56de 1000 \u4e2a\u6761\u76ee\uff0c\u800c <code>df.loc[0:1000]</code> \u5219\u4f1a\u8fd4\u56de 1001 \u4e2a\u6761\u76ee\uff01\u5982\u679c\u4f60\u60f3\u4f7f\u7528 <code>loc</code> \u83b7\u53d6 1000 \u4e2a\u5143\u7d20\uff0c\u4f60\u9700\u8981\u5c06\u7d22\u5f15\u8303\u56f4\u964d\u4f4e\u4e00\u4e2a\u5355\u4f4d\uff0c\u4e5f\u5c31\u662f\u8bf7\u6c42 <code>df.loc[0:999]</code>\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u4f7f\u7528 <code>loc</code> \u7684\u8bed\u4e49\u4e0e\u4f7f\u7528 <code>iloc</code> \u662f\u76f8\u540c\u7684\u3002 <pre><code>import pandas as pd\n\ndata = {\n    'points': [90, 85, 92, 88, 95],\n    'price': [120, 45, 90, 55, 110],\n    'variety': ['Cabernet Sauvignon', 'Pinot Noir', 'Chardonnay', 'Pinot Noir', 'Merlot']\n}\n\nreviews = pd.DataFrame(data)\n\ndef remean_adjusted_points(row):\n    # \u521d\u59cb\u5316 adjusted_points \u4e3a\u539f\u59cb points\n    row['adjusted_points'] = row['points']\n    if row['variety'] == 'Pinot Noir':\n        row['adjusted_points'] += 2\n        return row\n    # \u6839\u636e price \u8c03\u6574 points\n    if row['price'] &gt;= 100:\n        row['adjusted_points'] += 5\n    elif 50 &lt;= row['price'] &lt; 100:\n        row['adjusted_points'] += 3\n    elif row['price'] &lt; 50:\n        row['adjusted_points'] += 0  # \u8fd9\u91cc\u5176\u5b9e\u4e0d\u9700\u8981\u52a0 0\uff0c\u4f46\u4e3a\u4e86\u903b\u8f91\u6e05\u6670\u4fdd\u7559\n    return row\n\n# \u5e94\u7528\u51fd\u6570\u5e76\u521b\u5efa\u65b0\u5217\nreviews = reviews.apply(remean_adjusted_points, axis='columns')\n\nprint(reviews)\n</code></pre> output:    points  price             variety  adjusted_points 0      90    120  Cabernet Sauvignon               95 1      85     45          Pinot Noir               87 2      92     90          Chardonnay               95 3      88     55          Pinot Noir               90 4      95    110              Merlot              100</p>"}]}